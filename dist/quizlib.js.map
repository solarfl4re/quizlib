{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/quizlib.css?ba9b","webpack:///./src/quizlib.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA,uC;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAuB;;AAEvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,4CAA4C;AACpH;AACA;AACA,0CAA0C,6CAA6C,YAAY,OAAO,4CAA4C;AACtJ;AACA;AACA,0CAA0C,6CAA6C,YAAY,OAAO,4CAA4C;AACtJ;AACA,wDAAwD,4CAA4C,YAAY,cAAc,yCAAyC,YAAY;AACnL,yEAAyE,4CAA4C,YAAY;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gEAAgE,2BAA2B;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,4CAA4C;AACnH;AACA;AACA,yCAAyC,6CAA6C,YAAY,OAAO,4CAA4C;AACrJ;AACA;AACA,yCAAyC,6CAA6C,YAAY,OAAO,4CAA4C;AACrJ;AACA,uDAAuD,4CAA4C,YAAY,cAAc,yCAAyC,YAAY;AAClL,wEAAwE,4CAA4C,YAAY;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,yDAAyD,4CAA4C,YAAY;AACjH;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA,cAAc,2BAA2B;AACzC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,yBAAyB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU,iCAAiC;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,+FAA+F,yCAAyC,YAAY;AACpJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2BAA2B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wIAAwI,6CAA6C;AACrL;AACA;AACA;AACA;AACA;AACA,4CAA4C,6CAA6C;AACzF;AACA;AACA;AACA;AACA;AACA,yDAAyD,6CAA6C;AACtG;AACA;AACA;AACA;AACA;AACA,mDAAmD,6CAA6C;AAChG;AACA;AACA;AACA;AACA;AACA,0GAA0G,6CAA6C;AACvJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA,cAAc,yBAAyB;AACvC;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;AACA;;AAEA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA","file":"quizlib.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/quizlib.js\");\n","// extracted by mini-css-extract-plugin","import './quizlib.css';\n\n/**\n * QuizLib version 1.0.1\n * by Andy Palmer\n * https://alpsquid.github.io/quizlib\n */\n\n/**\n * Class that represents an HTML Quiz. Provides methods for checking answers, generating a score and providing visual feedback.  \n *\n * See https://alpsquid.github.io/quizlib for usage\n *\n * @class Quiz\n * @constructor\n * @param {String} quizContainer ID of the quiz container element.\n * @param {Array} answers Array of correct answers using the input value. e.g. ['a', '7', ['a', 'b']].\n *        Can use nested arrays for multi-answers such as checkbox questions\n * @example\n * \t\tnew Quiz('quiz-div', ['a', '7', ['c', 'd'], 'squids', ['a', 'b']]);\n */\nvar Quiz = function(quizContainer, answers) {\n\t/**\n\t * Enum containing classes used by QuizLib as follows:\n\t * - **QUESTION**: 'quizlib-question'\n\t *   - used to identify a question element\n\t * - **QUESTION_TITLE**: 'quizlib-question-title'\n\t *   - used to identify the question title element\n\t * - **QUESTION_WARNING**: 'quizlib-question-answers'\n\t *   - used to identify the element containing question answers\n\t * - **QUESTION_ANSWERS**: 'quizlib-question-warning'\n\t *   - used by the 'unanswered question warning' element. Removed by {{#crossLink \"Quiz/clearHighlights:method\"}}{{/crossLink}}\n\t * - **CORRECT**: 'quizlib-correct'\n\t *   - added to question titles to highlight correctly answered questions.  \n\t *     Use freely to take advantage of {{#crossLink \"Quiz/highlightResults:method\"}}{{/crossLink}} and {{#crossLink \"Quiz/clearHighlights:method\"}}{{/crossLink}}\n\t * - **INCORRECT**: 'quizlib-incorrect'\n\t *   - added to question titles to highlight incorrectly answered questions.  \n\t *     Use freely to take advantage of {{#crossLink \"Quiz/highlightResults:method\"}}{{/crossLink}} and {{#crossLink \"Quiz/clearHighlights:method\"}}{{/crossLink}}\n\t * - **TEMP**: 'quizlib-temp'\n\t *   - Add to any elements you want to be removed by {{#crossLink \"Quiz/clearHighlights:method\"}}{{/crossLink}} (called by {{#crossLink \"Quiz/checkAnswers:method\"}}{{/crossLink}}).\n\t *     For example, adding an element with the correct answer in your {{#crossLink \"Quiz/clearHighlights:method\"}}{{/crossLink}} callback and have it be removed automatically\n\t * \n\t * @property Classes\n\t * @type Object\n\t * @default See above\n\t * @final\n\t * @deprecated Since version 1.0.1, Classes should be accessed through the static context (Quiz.Classes)\n\t */\n\tthis.Classes = Object.freeze({\n\t\tQUESTION: \"quizlib-question\", \n\t\tQUESTION_TITLE: \"quizlib-question-title\",\n\t\tQUESTION_ANSWERS: \"quizlib-question-answers\",\n\t\tQUESTION_WARNING: \"quizlib-question-warning\",\n\t\tCORRECT: \"quizlib-correct\",\n\t\tINCORRECT: \"quizlib-incorrect\",\n\t\tTEMP: \"quizlib-temp\"\n\t});\n\n\t/**\n\t * Warning displayed on unanswered questions\n\t *\n\t * @property unansweredQuestionText\n\t * @type String\n\t * @default 'Unanswered Question!'\n\t */\n\tthis.unansweredQuestionText = 'Unanswered Question!';\n\n\t// Quiz container element\n\tthis.container = document.getElementById(quizContainer);\n\tthis.questions = [];\n\t/**\n\t * Quiz Result object containing quiz score information. See {{#crossLink \"QuizResult\"}}{{/crossLink}}\n\t *\n\t * @property result\n\t * @type QuizResult\n\t */\n\tthis.result = new QuizResult();\n\t/**\n\t * User defined answers taken from constructor\n\t *\n\t * @property answers\n\t * @type Array\n\t */\n\tthis.answers = answers;\n\n\t// Get all the questions and add element to the questions array\n\tfor (var i=0; i < this.container.children.length; i++) {\n\t\tif (this.container.children[i].classList.contains(Quiz.Classes.QUESTION)) {\n\t\t\tthis.questions.push(this.container.children[i]);\n\t\t}\n\t}\n\n\tif (this.answers.length != this.questions.length) {\n\t\tthrow new Error(\"Number of answers does not match number of questions!\");\n\t}\n};\n\n/**\n * Enum containing classes used by QuizLib as follows:\n * - **QUESTION**: 'quizlib-question'\n *   - used to identify a question element\n * - **QUESTION_TITLE**: 'quizlib-question-title'\n *   - used to identify the question title element\n * - **QUESTION_WARNING**: 'quizlib-question-answers'\n *   - used to identify the element containing question answers\n * - **QUESTION_ANSWERS**: 'quizlib-question-warning'\n *   - used by the 'unanswered question warning' element. Removed by {{#crossLink \"Quiz/clearHighlights:method\"}}{{/crossLink}}\n * - **CORRECT**: 'quizlib-correct'\n *   - added to question titles to highlight correctly answered questions.\n *     Use freely to take advantage of {{#crossLink \"Quiz/highlightResults:method\"}}{{/crossLink}} and {{#crossLink \"Quiz/clearHighlights:method\"}}{{/crossLink}}\n * - **INCORRECT**: 'quizlib-incorrect'\n *   - added to question titles to highlight incorrectly answered questions.\n *     Use freely to take advantage of {{#crossLink \"Quiz/highlightResults:method\"}}{{/crossLink}} and {{#crossLink \"Quiz/clearHighlights:method\"}}{{/crossLink}}\n * - **TEMP**: 'quizlib-temp'\n *   - Add to any elements you want to be removed by {{#crossLink \"Quiz/clearHighlights:method\"}}{{/crossLink}} (called by {{#crossLink \"Quiz/checkAnswers:method\"}}{{/crossLink}}).\n *     For example, adding an element with the correct answer in your {{#crossLink \"Quiz/clearHighlights:method\"}}{{/crossLink}} callback and have it be removed automatically\n *\n * @property Classes\n * @type Object\n * @default See above\n * @final\n */\nQuiz.Classes = Object.freeze({\n    QUESTION: \"quizlib-question\",\n    QUESTION_TITLE: \"quizlib-question-title\",\n    QUESTION_ANSWERS: \"quizlib-question-answers\",\n    QUESTION_WARNING: \"quizlib-question-warning\",\n    CORRECT: \"quizlib-correct\",\n    INCORRECT: \"quizlib-incorrect\",\n    TEMP: \"quizlib-temp\"\n});\n\n/**\n * Checks quiz answers against provided answers. Calls {{#crossLink \"Quiz/clearHighlights:method\"}}{{/crossLink}} for each question.\n *\n * @method checkAnswers\n * @param {Boolean} [flagUnanswered=true] Whether to ignore unanswered questions. If false, unanswered questions will not be flagged\n * @return {Boolean} True or if *flagUnanswered* is true: True if all questions have been answered. Otherwise false and unanswered questions are highlighted.\n */\nQuiz.prototype.checkAnswers = function(flagUnanswered) {\n\tif (flagUnanswered === undefined) flagUnanswered = true;\n\tvar unansweredQs = [];\n\tvar questionResults = [];\n\tfor (var i=0; i < this.questions.length; i++) {\n\t\tvar question = this.questions[i];\n\t\tvar answer = this.answers[i];\n\t\tvar userAnswer = [];\n\t\t\n\t\tthis.clearHighlights(question);\n\t\t\n\t\t// Get answers\n\t\tvar answerInputs = question.getElementsByClassName(Quiz.Classes.QUESTION_ANSWERS)[0].getElementsByTagName('input');\n\t\tvar input;\n\t\tfor (var k=0; k < answerInputs.length; k++) {\n\t\t\tinput = answerInputs[k];\n\t\t\tif (input.type === \"checkbox\" || input.type === \"radio\") {\n\t\t\t\t if (input.checked) userAnswer.push(input.value);\n\t\t\t} else if (input.value !== '') {\n\t\t\t\tuserAnswer.push(input.value);\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\t// Remove single answer from array to match provided answer format\n\t\tif (userAnswer.length == 1 && !Array.isArray(answer)) {\n\t\t\tuserAnswer = userAnswer[0];\n\t\t} else if (userAnswer.length === 0) {\n\t\t\tunansweredQs.push(question);\n\t\t}\n\t\t\n\t\t// Check the answers.\n\t\t// For single-choice questions, one correct answer must be given (out of perhaps multiple correct ones).\n\t\tif (input.type === \"radio\") {\n\t\t\t// Remove the single answer from its array, if it's still in there.\n\t\t\tif (Array.isArray(userAnswer) && userAnswer.length == 1) {\n\t\t\t\tuserAnswer = userAnswer[0];\n\t\t\t}\n\t\t\n\t\t\tif (Array.isArray(answer)) {\n\t\t\t\tquestionResults.push(answer.indexOf(userAnswer) >= 0);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tquestionResults.push(userAnswer === answer);\n\t\t\t}\n\t\t}\n\t\t// For multiple-choice questions (type \"checkbox\") and free-text questions, all correct answers must be given.\n\t\telse {\n\t\t\tquestionResults.push(Utils.compare(userAnswer, answer));\n\t\t}\n\t}\n\n\tif (unansweredQs.length === 0 || !flagUnanswered) {\n\t\tthis.result.setResults(questionResults);\n\t\treturn true;\n\t}\n\telse {\n\t\t// Highlight unanswered questions if set\n\t\tfor (i=0; i < unansweredQs.length; i++) {\n\t\t\tvar warning = document.createElement('span');\n\t\t\twarning.appendChild(document.createTextNode(this.unansweredQuestionText));\n\t\t\twarning.className = Quiz.Classes.QUESTION_WARNING;\n\t\t\tunansweredQs[i].getElementsByClassName(Quiz.Classes.QUESTION_TITLE)[0].appendChild(warning);\n\t\t}\n\t}\n\treturn false;\n};\n\n/**\n * Clears highlighting for a question element (correct and incorrect classes), including unanswered question warnings and elements using the Classes.TEMP class\n * \n * @method clearHighlights\n * @param {HTMLDocument} question Question element to clear\n */\nQuiz.prototype.clearHighlights = function(question) {\n\t// Remove question warning if it exists\n\tvar questionWarnings = question.getElementsByClassName(Quiz.Classes.QUESTION_WARNING);\n\twhile (questionWarnings.length > 0) {\n\t\tquestionWarnings[0].parentNode.removeChild(questionWarnings[0]);\n\t}\n\t\n\t// Remove highlighted elements\n\tvar highlightedQuestions = [question.getElementsByClassName(Quiz.Classes.CORRECT), question.getElementsByClassName(this.Classes.INCORRECT)];\n\tvar highlightedElement;\n\tfor (i=0; i < highlightedQuestions.length; i++) {\n\t\twhile (highlightedQuestions[i].length > 0) {\n\t\t\thighlightedElement = highlightedQuestions[i][0];\n\t\t\thighlightedElement.classList.remove(Quiz.Classes.CORRECT);\n\t\t\thighlightedElement.classList.remove(Quiz.Classes.INCORRECT);\n\t\t}\n\t}\n\t\n\t// Remove temp elements\n\tvar tempElements = question.getElementsByClassName(Quiz.Classes.TEMP);\n\twhile (tempElements.length > 0) {\n\t\ttempElements[0].parentNode.removeChild(tempElements[0]);\n\t}\n};\n\n/** \n * Highlights correctly and incorrectly answered questions by:  \n * - Adding the class 'quizlib-correct' to correctly answered question titles\n * - Adding the class 'quizlib-incorrect' to incorrectly answered question titles\n * \n * @method highlightResults\n * @param {Function} [questionCallback] Optional callback for each question with the following arguments:\n * 1. Quiz: the quiz object\n * 2. Element: the question element\n * 3. Number: question number\n * 4. Boolean: true if correct, false if incorrect.\n * \n * This allows you to further customise the handling of answered questions (and decouples the library from a specific HTML structure), for example highlighting the correct answer(s) on incorrect questions.  \n * Use the Classes.TEMP ('quizlib-temp') class on added elements that you want removing when {{#crossLink \"Quiz/checkAnswers:method\"}}{{/crossLink}} is called\n * \n * @example\n * ```\n *    // Method Call\n *    quiz.highlightResults(handleAnswers);\n *    \n *    // handleAnswers callback\n *    function handleAnswers(quizObject, questionElement, questionNo, correctFlag) {\n *        ...\n *    }\n * ```\n */\nQuiz.prototype.highlightResults = function(questionCallback) {\n\tvar question;\n\tfor (var i=0; i < this.questions.length; i++) {\n\t\tquestion = this.questions[i];\n\t\tif (this.result.results[i]) {\n\t\t\tquestion.getElementsByClassName(Quiz.Classes.QUESTION_TITLE)[0].classList.add(Quiz.Classes.CORRECT);\n\t\t}\n\t\telse {\n\t\t\tquestion.getElementsByClassName(Quiz.Classes.QUESTION_TITLE)[0].classList.add(Quiz.Classes.INCORRECT);\n\t\t}\n\t\tif (questionCallback !== undefined) questionCallback(this, question, i, this.result.results[i]);\n\t}\n};\n\n\n/**\n * Quiz Result class that holds score information\n *\n * @class QuizResult\n * @constructor\n */\nvar QuizResult = function() {\n\t/**\n\t * Array of booleans where the index is the question number and the value is whether the question was answered correctly. Updated by {{#crossLink \"QuizResult/setResults:method\"}}{{/crossLink}}\n\t * @property results\n\t * @type Array\n\t */\n\tthis.results = [];\n\t/**\n\t * Total number of questions. Updated by {{#crossLink \"QuizResult/setResults:method\"}}{{/crossLink}}\n\t * @property totalQuestions\n\t * @type Number\n\t */\n\tthis.totalQuestions = 0;\n\t/**\n\t * Number of questions answered correctly. Updated by {{#crossLink \"QuizResult/setResults:method\"}}{{/crossLink}}\n\t * @property score\n\t * @type Number\n\t */\n\tthis.score = 0;\n\t/**\n\t * Percentage score between 0 and 1. Updated by {{#crossLink \"QuizResult/setResults:method\"}}{{/crossLink}}\n\t * @property scorePercent\n\t * @type Number\n\t */\n\tthis.scorePercent = 0;\n\t/**\n\t * Formatted score percent that's more useful to humans (1 - 100). Percent is rounded down. Updated by {{#crossLink \"QuizResult/setResults:method\"}}{{/crossLink}}\n\t * @property scorePercentFormatted\n\t * @type Number\n\t */\n\tthis.scorePercentFormatted = 0;\n};\n\n/**\n * Calculates score information from an array of question results and updates properties\n *\n * @method setResults\n * @param {Array} questionResults Array of question results where the index is the question number and the value is whether the question was answered correctly. e.g. [true, true, false]\n */\nQuizResult.prototype.setResults = function(questionResults) {\n\tthis.results = questionResults;\n\tthis.totalQuestions = this.results.length;\n\tthis.score = 0;\n\tfor (var i=0; i < this.results.length; i++) {\n\t\tif (this.results[i]) this.score++;\n\t}\n\tthis.scorePercent = this.score / this.totalQuestions;\n\tthis.scorePercentFormatted = Math.floor(this.scorePercent * 100);\n};\n\n\n/**\n * Utils class that provides useful methods\n *\n * @class Utils\n */\nvar Utils = function() {};\n/**\n * Compare two objects without coercion. If objects are arrays, their contents will be compared, including order.\n *\n * @method compare\n * @param {Object} obj1 main object\n * @param {Object} obj2 object to compare obj1 against\n * @return {boolean} True if objects are equal\n */\nUtils.compare = function(obj1, obj2) {\n\tif (obj1.length != obj2.length) return false;\n\n\tif (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\tfor (var i=0; i < obj1.length; i++) {\n\t\t\tif (obj1[i] !== obj2[i]) return false;\n\t\t}\n\t\treturn true;\n\t}\n\treturn obj1 === obj2;\n};\n"],"sourceRoot":""}